/*
 * Copyright 2022 OneWelcome B.V.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

import React, { useEffect } from "react";
import { Meta, Story, StoryFn } from "@storybook/react";
import {
  SnackbarProvider,
  Props
} from "../../../src/components/Notifications/Snackbar/SnackbarProvider/SnackbarProvider";
import { useSnackbar } from "../../../src/components/Notifications/Snackbar/useSnackbar";
import SnackbarDocumentation from "./Snackbar.mdx";
import classes from "./Stories.module.scss";
/**
 * We want to disable autogenerated docs for a single story, but we can't currently... https://github.com/storybookjs/storybook/issues/21085
 */
const meta: Meta = {
  title: "components/Feedback/Snackbar",
  component: SnackbarProvider,
  parameters: {
    docs: {
      page: SnackbarDocumentation
    }
  }
};

export default meta;

const AppContent = () => {
  const { enqueueSnackbar } = useSnackbar();

  useEffect(() => {
    enqueueSnackbar({
      content: "Main message of the snackbar",
      actions: [{ label: "Contact support", onClick: () => alert("Clicked support") }],
      onClose: () => console.warn("onClose handler"),
      duration: 200000,
      className: classes["remove-animation"]
    });
  }, []);

  return null;
};

const Template: StoryFn<Props> = () => {
  return (
    <SnackbarProvider closeButtonTitle="Close">
      <AppContent />
    </SnackbarProvider>
  );
};

export const Snackbar = Template.bind({});

const ErrorSnackbarAppContent = () => {
  const { enqueueErrorSnackbar } = useSnackbar();

  useEffect(() => {
    enqueueErrorSnackbar({
      content: "Alert message.",
      actions: [{ label: "Action", onClick: () => alert("Clicked support") }],
      onClose: () => console.warn("onClose handler"),
      duration: 200000,
      className: classes["remove-animation"]
    });
  }, []);

  return null;
};

const ErrorSnackbarTemplate: StoryFn<Props> = () => {
  return (
    <SnackbarProvider closeButtonTitle="Close">
      <ErrorSnackbarAppContent />
    </SnackbarProvider>
  );
};

export const ErrorSnackbar = ErrorSnackbarTemplate.bind({});

const SnackbarWithTitleAppContent = () => {
  const { enqueueSnackbar } = useSnackbar();

  useEffect(() => {
    enqueueSnackbar({
      title: "This is a title",
      content: "Phasellus eleifend cursus vehicula. Pellentesque ut sem in elit pulvinar luctus.",
      actions: [{ label: "Action", onClick: () => alert("Clicked support") }],
      onClose: () => console.warn("onClose handler"),
      duration: 200000,
      className: classes["remove-animation"]
    });
  }, []);

  return null;
};

const SnackbarWithTitleTemplate: StoryFn<Props> = () => {
  return (
    <SnackbarProvider closeButtonTitle="Close">
      <SnackbarWithTitleAppContent />
    </SnackbarProvider>
  );
};

export const SnackbarWithTitle = SnackbarWithTitleTemplate.bind({});

const SuccessSnackbarAppContent = () => {
  const { enqueueSuccessSnackbar } = useSnackbar();

  useEffect(() => {
    enqueueSuccessSnackbar({
      content: "Alert message.",
      actions: [{ label: "Action", onClick: () => alert("Clicked support") }],
      onClose: () => console.warn("onClose handler"),
      duration: 200000,
      className: classes["remove-animation"]
    });
  }, []);

  return null;
};

const SuccessSnackbarTemplate: StoryFn<Props> = () => {
  return (
    <SnackbarProvider closeButtonTitle="Close">
      <SuccessSnackbarAppContent />
    </SnackbarProvider>
  );
};

export const SuccessSnackbar = SuccessSnackbarTemplate.bind({});

const WarningSnackbarAppContent = () => {
  const { enqueueWarningSnackbar } = useSnackbar();

  useEffect(() => {
    enqueueWarningSnackbar({
      content: "Alert message.",
      actions: [{ label: "Action", onClick: () => alert("Clicked support") }],
      onClose: () => console.warn("onClose handler"),
      duration: 200000,
      className: classes["remove-animation"]
    });
  }, []);

  return null;
};

const WarningSnackbarTemplate: StoryFn<Props> = () => {
  return (
    <SnackbarProvider closeButtonTitle="Close">
      <WarningSnackbarAppContent />
    </SnackbarProvider>
  );
};

export const WarningSnackbar = WarningSnackbarTemplate.bind({});
