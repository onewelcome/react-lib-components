@import './readyclasses.module.scss';

@mixin button($variant: 'text', $type: 'default') {
  $disabledSelector: if($type == 'link', '.disabled', ':disabled');

  @if $variant == 'text' {
    border-color: transparent;
    background-color: transparent;
  } @else if $variant == 'fill' {
    @if $type == 'default' {
      color: var(--button-fill-text-color);
    } @else if $type == 'icon' or $type == 'link' {
      &:not(#{$disabledSelector}) {
        color: var(--button-fill-text-color);
      }
    }
    font-weight: bold;
  } @else if $variant == 'outline' {
    background-color: var(--button-fill-background-color);
    font-weight: bold;
  }

  &.primary:not(#{$disabledSelector}) {
    @include buttonStyles(var(--color-primary), $variant, $type);
  }
  &.secondary:not(#{$disabledSelector}) {
    @include buttonStyles(var(--color-secondary), $variant, $type);
  }
  &.tertiary:not(#{$disabledSelector}) {
    @include buttonStyles(var(--color-tertiary), $variant, $type);
  }
  &.default:not(#{$disabledSelector}) {
    @include buttonStyles(var(--default), $variant, $type);
  }

  @if $variant == 'fill' {
    &:hover:not(#{$disabledSelector}),
    &:focus:not(#{$disabledSelector}),
    &:active:not(#{$disabledSelector}) {
      background-color: var(--button-fill-background-color);
    }

    &#{$disabledSelector} {
      background-color: var(--disabled);
      border-color: var(--disabled);
    }
  } @else if $variant == 'outline' {
    &:hover:not(#{$disabledSelector}),
    &:focus:not(#{$disabledSelector}) {
      color: var(--button-outline-hover-text-color);
    }

    &#{$disabledSelector} {
      border-color: var(--greyed-out);
      background-color: transparent;
    }
  }
}

@mixin buttonStyles($color, $variant: 'text', $type: 'default') {
  @if $variant == 'text' {
    color: $color;
  } @else if $variant == 'fill' {
    border-color: $color;
    background-color: $color;
  } @else if $variant == 'outline' {
    border-color: $color;
    color: $color;
  }

  @include focusOutline($color);

  &:hover:not(.disabled),
  &:focus:not(.disabled) {
    @if $variant == 'text' {
      border-color: $color;
    } @else if $variant == 'fill' {
      color: $color;
    } @else if $variant == 'outline' {
      background-color: $color;
    }
  }

  @if $variant == 'text' or $variant == 'fill' {
    &:active:not(.disabled) {
      @if $variant == 'text' {
        background-color: transparent;
        position: relative;
        color: $color;
        border-color: var(--button-fill-background-color);
      } @else if $variant == 'fill' {
        position: relative;
        color: $color;
      }

      &:after {
        content: '';
        position: absolute;
        @if $variant == 'fill' {
          top: calc(-1 * var(--button-border-width));
        } @else {
          top: calc(-1 * var(--button-border-width) + (var(--button-border-width) / 2));
        }
        @if $type == 'default' or $type == 'link' {
          left: 0;
          width: 100%;
        } @else if $type == 'icon' {
          left: calc(-1 * var(--button-border-width) + (var(--button-border-width) / 2));
          width: calc(100% + var(--button-border-width));
        }
        height: calc(100% + var(--button-border-width));
        background-color: $color;
        border-radius: var(--button-border-radius);
        filter: opacity(0.1);
      }
    }
  }
}

@mixin buttonBase($type: 'default') {
  $disabledSelector: if($type == 'link', '.disabled', ':disabled');

  border-width: var(--button-border-width);
  border-style: var(--button-border-style);
  border-radius: var(--button-border-radius);
  font-size: var(--button-font-size);
  line-height: var(--button-font-size);
  margin: 0;
  padding: 0.5rem 1.25rem;
  min-height: 2.5rem;
  cursor: pointer;
  transition-property: color, background-color, border-color;
  transition-duration: 0.2s;
  transition-timing-function: ease-in-out;
  font-family: var(--font-family);

  &#{$disabledSelector} {
    color: var(--greyed-out);
    cursor: not-allowed;
  }
}

@mixin skeletonLoading() {
  position: relative;
  overflow: hidden;
  background-color: var(--disabled);

  &::after {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    transform: translateX(-100%);
    background-image: linear-gradient(
      90deg,
      rgba(#fff, 0) 0,
      rgba(#fff, 0.2) 20%,
      rgba(#fff, 0.5) 60%,
      rgba(#fff, 0)
    );
    animation: shimmer 2s infinite;
    content: '';
  }

  @keyframes shimmer {
    100% {
      transform: translateX(100%);
    }
  }
}
